step by step pembuatan Form Validation Tutorial

=====================
perhatian file ini :

1. C:\xampp\htdocs\CodeIgniter\application\config\routes.php
2. C:\xampp\htdocs\CodeIgniter\application\views\form_validation_view.php
3. C:\xampp\htdocs\CodeIgniter\application\controllers\form_validation.php

=======================

testing ada 1 exmple  : 

link nya : 

http://localhost/CodeIgniter/index.php/form_validation/validate_form


yg di di ubah ADA 3 FILE : 


1. C:\xampp\htdocs\CodeIgniter\application\config\routes.php

<?php
defined('BASEPATH') or exit('No direct script access allowed');

/*
| -------------------------------------------------------------------------
| URI ROUTING
| -------------------------------------------------------------------------
| This file lets you re-map URI requests to specific controller functions.
|
| Typically there is a one-to-one relationship between a URL string
| and its corresponding controller class/method. The segments in a
| URL normally follow this pattern:
|
|	example.com/class/method/id/
|
| In some instances, however, you may want to remap this relationship
| so that a different class/function is called than the one
| corresponding to the URL.
|
| Please see the user guide for complete details:
|
|	https://codeigniter.com/userguide3/general/routing.html
|
| -------------------------------------------------------------------------
| RESERVED ROUTES
| -------------------------------------------------------------------------
|
| There are three reserved routes:
|
|	$route['default_controller'] = 'welcome';
|
| This route indicates which controller class should be loaded if the
| URI contains no data. In the above example, the "welcome" class
| would be loaded.
|
|	$route['404_override'] = 'errors/page_missing';
|
| This route will tell the Router which controller/method to use if those
| provided in the URL cannot be matched to a valid route.
|
|	$route['translate_uri_dashes'] = FALSE;
|
| This is not exactly a route, but allows you to automatically route
| controller and method names that contain dashes. '-' isn't a valid
| class or method name character, so it requires translation.
| When you set this option to TRUE, it will replace ALL dashes in the
| controller and method URI segments.
|
| Examples:	my-controller/index	-> my_controller/index
|		my-controller/my-method	-> my_controller/my_method
*/

$route['default_controller'] = 'form_validation';
$route['404_override'] = '';
$route['translate_uri_dashes'] = FALSE;


============================================================
2. C:\xampp\htdocs\CodeIgniter\application\views\form_validation_view.php

<h2 class="mb-4">Form Validation Example</h2>
<?php echo form_open('form_validation/validate_form', ['class' => 'form-horizontal']); ?>
<div class="form-group row">
	<label for="name" class="col-sm-2 col-form-label">Name</label>
	<div class="col-sm-10">
		<input type="text" class="form-control" id="name" name="name" />
	</div>
</div>
<div class="form-group row">
	<label for="email" class="col-sm-2 col-form-label">Email</label>
	<div class="col-sm-10">
		<input type="email" class="form-control" id="email" name="email" />
	</div>
</div>
<?php if (validation_errors()) { ?>
	<div class="row justify-content-center">
		<div class="col-md-8">
			<div class="alert alert-danger">
				<?php echo validation_errors(); ?>
			</div>
		</div>
	</div>
<?php } ?>
<div class="form-group row">
	<label for="password" class="col-sm-2 col-form-label">Password</label>
	<div class="col-sm-10">
		<input type="password" class="form-control" id="password" name="password" />
	</div>
</div>
<div class="form-group row">
	<div class="col-sm-10 offset-sm-2">
		<button type="submit" class="btn btn-primary">Submit</button>
	</div>
</div>
<?php echo form_close(); ?>


=========================================================================
3. C:\xampp\htdocs\CodeIgniter\application\controllers\form_validation.php

<?php
defined('BASEPATH') or exit('No direct script access allowed');

class form_validation extends CI_Controller
{
	public function validate_form()
	{
		$this->load->library('form_validation');

		$this->form_validation->set_rules('name', 'Name', 'required|min_length[3]|max_length[20]');
		$this->form_validation->set_rules('email', 'Email', 'required|valid_email');
		$this->form_validation->set_rules('password', 'Password', 'required|min_length[6]|max_length[20]');

		if ($this->form_validation->run() == FALSE) {
			$this->load->view('form_validation_view');
		} else {
			echo 'Form is valid. Proceeding to next step...';
		}
	}
}


======================================================================
